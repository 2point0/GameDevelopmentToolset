<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="tabRigidBodies" label="Rigid Bodies">
    <memberTool name="fractureRigAnimExport"/>
    <memberTool name="rtPrefractureExport"/>
  </toolshelf>

  <shelfSet name="shelfSetGameDevelopment" label="Game Development">
    <memberToolshelf name="rtCloth"/>
    <memberToolshelf name="tabRigidBodies"/>
    <memberToolshelf name="rtUtilities"/>
  </shelfSet>

  <tool name="keyframeReducer" label="Keyframe Reducer" icon="SOP_add">
    <helpText><![CDATA[=Keyframe Reducer=
"""This tool takes a series of nodes that have too many keyframes and optimizes them."""

NOTE:
 In its current state, this tool goes through each node for the entire timeline and compares the selected parameters. It compares the current vs the next frame to see if the value has changed. If the difference is less than the tolerance, the keyframe is removed.

==Using this tool==
# Select the node or nodes you wish to process.
# Set the tool accordingly.]]></helpText>
    <script scriptType="python"><![CDATA[import sys
import hou

####################
#Add src directory
#to path if it isn't there
####################
SOURCE  = hou.expandString('$HOUDINI_USER_PREF_DIR') + "/toolbar/src"

if SOURCE not in sys.path:
    sys.path.append(SOURCE)

####################
#Import FBXImport Script
####################
import KeyframeReducer
reload(KeyframeReducer)

#################################
#Class constructor call!
#################################
KeyframeReducer.init(hou.selectedNodes())]]></script>
  </tool>

  <toolshelf name="rtUtilities" label="Utilities">
    <memberTool name="keyframeReducer"/>
  </toolshelf>

  <toolshelf name="rtCloth" label="Cloth">
    <memberTool name="vertexAnimationRig"/>
  </toolshelf>

  <tool name="vertexAnimationRig" label="Vertex Animation Rig" icon="DOP_clothobject">
    <helpText><![CDATA[=Vertex Animation Rig=
"""This tool takes any SOP node, creates a subnet (/obj/FBX_EXPORT) containing a skeleton with a bone generated per point, and then keyframes their positions based on animated geometry. Typical usage: Cloth sequences."""

NOTE:
 This tool assumes you already have a cloth simulation or a vertex animation in place. This should be the last major tool you use for this particualr pipeline!

==Preflight==
This tool is quite simple to get going. There are only a couple things you need to know:

* The timeline is set to the range you intend to export. If your timeline is set to 1-240, this tool will generate 240 keyframes from 1-240.
* The animation is created at the SOP level or imported back into the SOP level (ex. fetched geometry from a DOP simulation).

==Using this tool==
# Select the SOP node for processing.
# Click the tool's button!
# Export the resulting /obj/FBX_EXPORT subnet (might have a number appended if one exists) to an FBX file]]></helpText>
    <script scriptType="python"><![CDATA[import sys
import hou

####################
#Add src directory
#to path if it isn't there
####################
SOURCE  = hou.expandString('$HOUDINI_USER_PREF_DIR') + "/toolbar/src"

if SOURCE not in sys.path:
    sys.path.append(SOURCE)

####################
#Import FBXImport Script
####################
import VertexAnimationRig
reload(VertexAnimationRig)

#################################
#Class constructor call!
#################################
VertexAnimationRig.init(hou.selectedNodes())]]></script>
  </tool>

  <tool name="fractureRigAnimExport" label="Fracture Animated Export" icon="DOP_rbdfracturedobject">
    <helpText><![CDATA[=Fracture Rig=
"""This tool takes DOP RBD Packed Object nodes, creates a subnet (/obj/FBX_EXPORT) containing all the individual pieces, and then keyframes their positions based on the simulation. Typical usage: baked destruction sequences."""

NOTE:
 This tool was designed to be the very last thing done before exporting to FBX! It was also designed around the idea that the artists have already created the environment and the transforms have no modifications. Before moving forward, please review the Preflight section below.

==Preflight==
There are a couple things that need to be checked before using this tool.

* It's assumed the fracture pipeline was geared towards objects that were previously created either in Houdini or imported from another package. For example: the art director would like a wall to break in a level that already exists in-engine.
* All transform modifications are kept to a minimum. Ideally the transforms in the simulation and at the geometry level are 1:1. Otherwise the tool might result in the fracture pieces not lining up properly. Commonly, the pieces will be rotated in odd ways.
* The timeline is set to the range you intend to export. If your timeline is set from 1-240, this tool will generate 240 keyframes incrementing from 1-240. This is required to ensure accuracy in the resulting baked animation.
* Be sure to set the 'startframe' parameter to AnimationStart-1. Otherwise the first frame of the animation will be slightly off.

==Packing Manually==
This pertains to custom pipelines where the packing is handled manually.

* If packing the object manually, the @name attribute must be incremental (ex. piece0, piece1, piece2, etc). However, the prefix can be any text as long as it doesn't contain numbers.
* If using mulitple packed objects, each packed set should use the above naming starting at 0.

==Using this tool==
# Select the RBD Packed Object nodes in your DOP Network for processing.
# Click the tool's button!
# Export the resulting /obj/FBX_EXPORT subnet (might have a number appended if one exists) to an FBX file.]]></helpText>
    <script scriptType="python"><![CDATA['''
Fracture Rig!
Author: Steven Burrichter
Company: Side Effects Software
Last Updated: 01/27/2016

SHELF TOOL: This points to the file externally in the /toolbar/src folder.
This is so you can use any external editor to modify the files.

IMPORTANT NOTES
1) Make sure the object you want to fracture is at the origin and has NO
transform modifications. Feel free to put an xform node at the SOP level, but
be warned that if you get any weird rotations or jittering, transforms are the
first culprit.

2) Set up your simulation exactly how you want it. If the transforms are set
properly, the pieces will be 1:1 with the simulation. THEN press the button.
This tool is designed to be the very last step in the process.

3) FOR YOUR RBD IMPORT IN THE DOP NETWORK: The script current does not parse
the default opinputpath. Please set the absolute or relative path.

4) If you run into transform issues in another program, check to make sure the
frame rates are the same! Houdini exports at 24fps by default!

CHANGES:
1) No longer need attribcreate in the sop network. It automatically finds
the correct geometry. If other nodes cause conflicts, add to if statement in
FindReferenceGeometry().

2) Tool now checks for the creation frame of the RBD Object Import node. You can
now set a custom start frame and the tool will automatically find the delta of
the rest attribute in the simulation!
'''

import sys
import hou

####################
#Add src directory
#to path if it isn't there
####################
SOURCE  = hou.expandString('$HOUDINI_USER_PREF_DIR') + "/toolbar/src"

if SOURCE not in sys.path:
    sys.path.append(SOURCE)

####################
#Import FBXImport Script
####################
import FractureRig
reload(FractureRig)

#################################
#Class constructor call!
#################################
FractureRig.init(hou.selectedNodes())]]></script>
  </tool>

  <tool name="rtPrefractureExport" label="Fracture Static Export" icon="DOP_rbdfracturedobject">
    <helpText><![CDATA[=Fracture Rig=
"""This tool takes packed geometry at the SOP level and creates a subnet (/obj/FBX_EXPORT) containing all the individual pieces. Typical usage: prefracturing meshes for APEX Destruction."""

NOTE:
 This tool was designed to be the very last thing done before exporting to FBX! It was also designed around the idea that the artists have already created the environment and the transforms have no modifications. Before moving forward, please review the Preflight section below.

==Preflight==
There are a couple things that need to be checked before using this tool.

* It's assumed the fracture pipeline was geared towards objects that were previously created either in Houdini or imported from another package. For example: the art director would like a wall to break in a level that already exists in-engine.
* All transform modifications are kept to a minimum. Ideally the transforms in the simulation and at the geometry level are 1:1. Otherwise the tool might result in the fracture pieces not lining up properly. Commonly, the pieces will be rotated in odd ways.

==Packing Manually==
This pertains to custom pipelines where the packing is handled manually.

* If packing the object manually, the @name attribute must be incremental (ex. piece0, piece1, piece2, etc). However, the prefix can be any text as long as it doesn't contain numbers.
* If using mulitple packed objects, each packed set should use the above naming starting at 0.

==Using this tool==
# Select the SOP nodes in your SOP Network for processing (after using the assemble SOP to pack the geometry).
# Click the tool's button!
# Export the resulting /obj/FBX_EXPORT subnet (might have a number appended if one exists) to an FBX file.]]></helpText>
    <script scriptType="python"><![CDATA['''
'''

import sys
import hou

####################
#Add src directory
#to path if it isn't there
####################
SOURCE  = hou.expandString('$HOUDINI_USER_PREF_DIR') + "/toolbar/src"

if SOURCE not in sys.path:
    sys.path.append(SOURCE)

####################
#Import FBXImport Script
####################
import PrefractureExport
reload(PrefractureExport)

#################################
#Class constructor call!
#################################
PrefractureExport.init(hou.selectedNodes())]]></script>
  </tool>
</shelfDocument>
