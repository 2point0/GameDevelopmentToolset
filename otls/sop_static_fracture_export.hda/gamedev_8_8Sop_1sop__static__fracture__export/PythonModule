def CreateNewSubnet(a_ContainerName):
    a_ContainerName = a_ContainerName if a_ContainerName != "" else "FRACTURE_CONTAINER"
    return hou.node("/obj").createNode("subnet", a_ContainerName)

def CreateGeoFracContainer(a_Source, a_ContainerDir, a_PieceIndex, a_Frame):
    Geometry = hou.node(a_ContainerDir).createNode("geo", "mesh_%s" % a_PieceIndex)
    ObjMerge = Geometry.createNode("object_merge")
    ObjMerge.parm("objpath1").set(a_Source)
    ObjMerge.parm("group1").set(str(a_PieceIndex))

    TimeShift = Geometry.createNode("timeshift")
    TimeShift.parm("frame").deleteAllKeyframes()
    TimeShift.parm("frame").set(a_Frame)
    TimeShift.setNextInput(ObjMerge)

    Output = Geometry.createNode("output")
    Output.setNextInput(TimeShift)
    Output.setDisplayFlag(True)
    Output.setRenderFlag(True)
    Output.setHardLocked(1)

    Geometry.layoutChildren()

def Main():
    Frame = hou.pwd().parm("iFrame").evalAsInt()
    ContainerName = hou.pwd().parm("sContainerName").evalAsString()
    GeometrySource = hou.node("%s/FRACTURE_OBJECT" % hou.pwd().path())
    Geometry = GeometrySource.geometry()

    ExportContainer = CreateNewSubnet(ContainerName)

    for i, point in enumerate(Geometry.points()):
        CreateGeoFracContainer(GeometrySource.path(), ExportContainer.path(), i, Frame)

    ExportContainer.layoutChildren()